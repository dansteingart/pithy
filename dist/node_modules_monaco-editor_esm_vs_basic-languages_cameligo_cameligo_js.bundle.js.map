{"version":3,"file":"node_modules_monaco-editor_esm_vs_basic-languages_cameligo_cameligo_js.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ,YAAY,GAAG;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU;AACV;AACA;AACA,UAAU,QAAQ,YAAY,GAAG;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU,uBAAuB;AACjC,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA,UAAU,QAAQ,YAAY,6BAA6B;AAC3D,UAAU,kDAAkD;AAC5D,UAAU,uDAAuD;AACjE,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAwD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['(*', '*)']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<', '>']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" },\n        { open: '\"', close: '\"' },\n        { open: '(*', close: '*)' }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" },\n        { open: '\"', close: '\"' },\n        { open: '(*', close: '*)' }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.cameligo',\n    ignoreCase: true,\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'abs',\n        'assert',\n        'block',\n        'Bytes',\n        'case',\n        'Crypto',\n        'Current',\n        'else',\n        'failwith',\n        'false',\n        'for',\n        'fun',\n        'if',\n        'in',\n        'let',\n        'let%entry',\n        'let%init',\n        'List',\n        'list',\n        'Map',\n        'map',\n        'match',\n        'match%nat',\n        'mod',\n        'not',\n        'operation',\n        'Operation',\n        'of',\n        'record',\n        'Set',\n        'set',\n        'sender',\n        'skip',\n        'source',\n        'String',\n        'then',\n        'to',\n        'true',\n        'type',\n        'with'\n    ],\n    typeKeywords: ['int', 'unit', 'string', 'tz', 'nat', 'bool'],\n    operators: [\n        '=',\n        '>',\n        '<',\n        '<=',\n        '>=',\n        '<>',\n        ':',\n        ':=',\n        'and',\n        'mod',\n        'or',\n        '+',\n        '-',\n        '*',\n        '/',\n        '@',\n        '&',\n        '^',\n        '%',\n        '->',\n        '<-',\n        '&&',\n        '||'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_][\\w]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/'/, 'string.invalid'],\n            [/\\#\\d+/, 'string']\n        ],\n        /* */\n        comment: [\n            [/[^\\(\\*]+/, 'comment'],\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n            [/\\*\\)/, 'comment', '@pop'],\n            [/\\(\\*/, 'comment']\n        ],\n        string: [\n            [/[^\\\\']+/, 'string'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\(\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ]\n    }\n};\n"],"names":[],"sourceRoot":""}